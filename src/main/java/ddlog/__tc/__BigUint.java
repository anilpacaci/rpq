// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__tc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class __BigUint extends Table {
  public static __BigUint getRootAs__BigUint(ByteBuffer _bb) { return getRootAs__BigUint(_bb, new __BigUint()); }
  public static __BigUint getRootAs__BigUint(ByteBuffer _bb, __BigUint obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public __BigUint __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int bytes(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int bytesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer bytesAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer bytesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int create__BigUint(FlatBufferBuilder builder,
      int bytesOffset) {
    builder.startObject(1);
    __BigUint.addBytes(builder, bytesOffset);
    return __BigUint.end__BigUint(builder);
  }

  public static void start__BigUint(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addBytes(FlatBufferBuilder builder, int bytesOffset) { builder.addOffset(0, bytesOffset, 0); }
  public static int createBytesVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startBytesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int end__BigUint(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

